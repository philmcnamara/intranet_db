# Generated by Django 2.2.9 on 2020-01-30 09:32

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('contenttypes', '0002_remove_content_type_name'),
    ]

    operations = [
        migrations.CreateModel(
            name='FormZBaseElement',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text="This is only the name displayed in the rendered FormZ form. It is NOT used for auto-detection of features in a plasmid map, only aliases (below) are used for that. Duplicates are allowed, therefore, instead of using, for example, 'Hs EXO1', use 'EXO1'", max_length=255, verbose_name='name')),
                ('description', models.TextField(blank=True, verbose_name='description')),
                ('common_feature', models.BooleanField(default=False, help_text='e.g. an antibiotic resistance marker or a commonly used promoter', verbose_name='is this a common plasmid feature?')),
            ],
            options={
                'verbose_name': 'sequence element',
                'verbose_name_plural': 'sequence elements',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='FormZHeader',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('operator', models.CharField(help_text='Name des Betreibers', max_length=255, verbose_name='operator')),
                ('address', models.TextField(help_text='Anschrift der gentechnischen Anlage', verbose_name='address of bioengineering facility')),
                ('name_biosafety_officer', models.CharField(help_text='Name des Beauftragten für die Biologische Sicherheit', max_length=255, verbose_name='name of the biosafety officer')),
                ('s1_approval_file_num', models.CharField(help_text='e.g. 21-29,8 B 56.01; TgbNr.: 8/29,0/11/36', max_length=255, verbose_name='file number for S1 approval')),
                ('s1_approval_date', models.DateField(null=True, verbose_name='S1 approval date')),
                ('s2_approval_file_num', models.CharField(help_text='e.g. 29,8 B 56.02:21; TgbNr.: 8/29,0/13/46', max_length=255, verbose_name='file number for S2 approval')),
                ('s2_approval_date', models.DateField(null=True, verbose_name='S2 approval date')),
            ],
            options={
                'verbose_name': 'header',
                'verbose_name_plural': 'headers',
            },
        ),
        migrations.CreateModel(
            name='FormZProject',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='<i>Titel</i>', max_length=255, verbose_name='title')),
                ('short_title', models.CharField(help_text='<i>Kurzer Titel</i>', max_length=255, verbose_name='short title')),
                ('short_title_english', models.CharField(max_length=255, verbose_name='English short title')),
                ('safety_level', models.PositiveSmallIntegerField(choices=[(1, 1), (2, 2)], help_text='<i>Sicherheitsstufe</i>', null=True, verbose_name='safety level')),
                ('objectives', models.CharField(blank=True, help_text='<i>Zielsetzung</i>', max_length=255, verbose_name='objectives of strategy')),
                ('description', models.TextField(blank=True, help_text='Techniques, organisms, plasmids, etc. <i>Beschreibung der Durchführung</i>', verbose_name='Description of strategy/performance')),
                ('donor_organims', models.CharField(blank=True, help_text='Used organisms, their risk group and safety-relevant properties. <i>Verwendete Spenderorganismen</i>', max_length=255, verbose_name='donor organisms')),
                ('potential_risk_nuc_acid', models.TextField(blank=True, help_text='Include safety-relevant properties. <i>Gefährdungspotentiale der übertragenen Nukleinsäuren</i>', verbose_name='potential risks of transferred nucleic acids')),
                ('vectors', models.TextField(blank=True, help_text='Include safety-relevant properties', verbose_name='Vectors')),
                ('recipient_organisms', models.CharField(blank=True, help_text='Include risk groups and safety-relevant properties. <i>Verwendete Empfängerorganismen</i>', max_length=255, verbose_name='recipient organisms')),
                ('generated_gmo', models.TextField(blank=True, help_text='Include risk groups and safety-relevant properties. <i>Erzeugte GVO</i>', verbose_name='generated GMOs')),
                ('hazard_activity', models.TextField(blank=True, help_text='<i>Gefährdungsrelevante Merkmale der Tätigkeit</i>', verbose_name='hazard-relevant characteristics of activity')),
                ('hazards_employee', models.TextField(blank=True, help_text='<i>Schwere und Wahrscheinlichkeit einer Gefährdung der Mitarbeiter und/oder der Umwelt</i>', verbose_name='severity and likelihood of hazards to employees and/or the environment')),
                ('beginning_work_date', models.DateField(help_text='<i>Beginn der Arbeiten</i>', null=True, verbose_name='beginning of work')),
                ('end_work_date', models.DateField(blank=True, help_text='<i>Ende der Arbeiten</i>', null=True, verbose_name='end of work')),
                ('parent_project', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='formz.FormZProject', verbose_name='parent project')),
                ('project_leader', models.ManyToManyField(default=6, help_text='<i>Projektleiter</i>', to=settings.AUTH_USER_MODEL, verbose_name='project leaders')),
            ],
            options={
                'verbose_name': 'project',
                'verbose_name_plural': 'projects',
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='GenTechMethod',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('english_name', models.CharField(max_length=255, verbose_name='English name')),
                ('german_name', models.CharField(max_length=255, verbose_name='German name')),
            ],
            options={
                'verbose_name': 'genTech method',
                'verbose_name_plural': 'genTech methods',
                'ordering': ['english_name'],
            },
        ),
        migrations.CreateModel(
            name='NucleicAcidPurity',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('english_name', models.CharField(max_length=255, verbose_name='English name')),
                ('german_name', models.CharField(max_length=255, verbose_name='German name')),
            ],
            options={
                'verbose_name': 'nuclei acid purity',
                'verbose_name_plural': 'nuclei acid purities',
                'ordering': ['english_name'],
            },
        ),
        migrations.CreateModel(
            name='NucleicAcidRisk',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('english_name', models.CharField(max_length=255, verbose_name='English name')),
                ('german_name', models.CharField(max_length=255, verbose_name='German name')),
            ],
            options={
                'verbose_name': 'nuclei acid risk potential',
                'verbose_name_plural': 'nuclei acid risk potentials',
                'ordering': ['english_name'],
            },
        ),
        migrations.CreateModel(
            name='Species',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('latin_name', models.CharField(blank=True, help_text='Use FULL latin name, e.g. Homo sapiens', max_length=255, verbose_name='latin name')),
                ('common_name', models.CharField(blank=True, max_length=255, verbose_name='common name')),
                ('risk_group', models.PositiveSmallIntegerField(choices=[(1, 1), (2, 2), (3, 3), (4, 4)], null=True, verbose_name='risk group')),
                ('name_for_search', models.CharField(max_length=255, unique=True)),
                ('show_in_cell_line_collection', models.BooleanField(default=False, verbose_name='show as organism in cell line collection?')),
            ],
            options={
                'verbose_name': 'species',
                'verbose_name_plural': 'species',
                'ordering': ['latin_name', 'common_name'],
            },
        ),
        migrations.CreateModel(
            name='ZkbsCellLine',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='name')),
                ('synonym', models.CharField(blank=True, max_length=255, verbose_name='synonym')),
                ('organism', models.CharField(max_length=255, verbose_name='organism')),
                ('risk_potential', models.CharField(max_length=255, verbose_name='risk potential')),
                ('origin', models.CharField(max_length=255, verbose_name='origin')),
                ('virus', models.CharField(max_length=255, verbose_name='virus')),
                ('genetically_modified', models.BooleanField(blank=True, verbose_name='genetically modified?')),
            ],
            options={
                'verbose_name': 'ZKBS cell line',
                'verbose_name_plural': 'ZKBS cell lines',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='ZkbsOncogene',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='name')),
                ('synonym', models.CharField(max_length=255, verbose_name='synonym')),
                ('species', models.CharField(max_length=255, verbose_name='species')),
                ('risk_potential', models.CharField(max_length=255, verbose_name='risk potential')),
                ('reference', models.TextField(verbose_name='description')),
                ('additional_measures', models.BooleanField(blank=True, verbose_name='additional measures?')),
            ],
            options={
                'verbose_name': 'ZKBS oncogene',
                'verbose_name_plural': 'ZKBS oncogenes',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='ZkbsPlasmid',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='name')),
                ('source', models.CharField(max_length=255, verbose_name='source')),
                ('purpose', models.CharField(max_length=255, verbose_name='purpose')),
                ('description', models.TextField(blank=True, verbose_name='description')),
            ],
            options={
                'verbose_name': 'ZKBS plasmid',
                'verbose_name_plural': 'ZKBS plasmids',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='FormZUsers',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('beginning_work_date', models.DateField(blank=True, null=True, verbose_name='beginning of work')),
                ('end_work_date', models.DateField(blank=True, null=True, verbose_name='end of work')),
                ('formz_project', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='formz.FormZProject', verbose_name='formZ project')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL, verbose_name='user')),
            ],
        ),
        migrations.CreateModel(
            name='FormZStorageLocation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('storage_location', models.CharField(help_text='Room where the collection is stored', max_length=255, verbose_name='storage location')),
                ('species_risk_group', models.PositiveSmallIntegerField(choices=[(1, 1), (2, 2)], null=True, verbose_name='species risk group')),
                ('collection_model', models.OneToOneField(help_text='Strain, plasmids, cell lines, etc.', null=True, on_delete=django.db.models.deletion.PROTECT, to='contenttypes.ContentType', verbose_name='collection')),
                ('species_name', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='formz.Species', verbose_name='species name')),
            ],
            options={
                'verbose_name': 'storage location',
                'verbose_name_plural': 'storage locations',
            },
        ),
        migrations.AddField(
            model_name='formzproject',
            name='users',
            field=models.ManyToManyField(blank=True, related_name='formz_project_users', through='formz.FormZUsers', to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='FormZBaseElementExtraLabel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('label', models.CharField(blank=True, max_length=255, unique=True, verbose_name='alias')),
                ('formz_base_element', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='extra_label', to='formz.FormZBaseElement')),
            ],
            options={
                'verbose_name': 'base element alias',
                'verbose_name_plural': 'base element aliases',
                'ordering': ['label'],
            },
        ),
        migrations.AddField(
            model_name='formzbaseelement',
            name='donor_organism',
            field=models.ManyToManyField(help_text='Choose none, for artificial elements', to='formz.Species', verbose_name='donor organism'),
        ),
        migrations.AddField(
            model_name='formzbaseelement',
            name='nuc_acid_purity',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to='formz.NucleicAcidPurity', verbose_name='nucleic acid purity'),
        ),
        migrations.AddField(
            model_name='formzbaseelement',
            name='nuc_acid_risk',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to='formz.NucleicAcidRisk', verbose_name='nucleic acid risk potential'),
        ),
        migrations.AddField(
            model_name='formzbaseelement',
            name='zkbs_oncogene',
            field=models.ForeignKey(blank=True, help_text='<a href="/formz/zkbsoncogene/" target="_blank">View</a>', null=True, on_delete=django.db.models.deletion.PROTECT, to='formz.ZkbsOncogene', verbose_name='ZKBS database oncogene'),
        ),
    ]
